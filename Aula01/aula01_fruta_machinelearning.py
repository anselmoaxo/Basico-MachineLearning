# -*- coding: utf-8 -*-
"""Aula01-fruta_machineLearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CO_1lCXcNj0QqmxkG1xMYWPzbweWGUAN
"""

!pip install scikit-learn

import pandas as pd
from sklearn import tree

df = pd.read_excel("/content/data/dados_frutas.xlsx")
df

"""**Utilizando aprendizado de maquina**

x são as variaveis
y é o que queremos preferer

Este código prepara os dados para um modelo de aprendizado de máquina

*   Identifica frutas com base nas características selecionadas *
"""

features = ["Arredondada", "Suculenta", "Vermelha", "Doce"]
target = 'Fruta'
x = df[features]
y = df[target]

arvore = tree.DecisionTreeClassifier(random_state=42)
arvore = arvore.fit(x, y)

import matplotlib.pyplot as plt
plt.figure(dpi=600)

"""# *A plot_tree função é chamada para gerar uma representação gráfica do modelo de árvore de decisão.*

**arvore:**  Este argumento representa o modelo de árvore de decisão que você deseja visualizar. É provavelmente uma instância de um classificador de árvore de decisão ou classe de regressor do scikit-learn.

**class_names(opcional):**  Este argumento especifica os rótulos das classes alvo na árvore de decisão. Deve ser uma lista de strings com a mesma ordem dos rótulos das classes no modelo ( arvore.classes_).

**feature_names(opcional):** Este argumento permite definir rótulos personalizados para os recursos usados ​​na árvore de decisão. Deve ser uma lista de strings com a mesma ordem dos nomes dos recursos usados ​​para treinar o modelo.

**filled(opcional):** Este argumento controla a coloração dos nós internos. Se True(padrão), os nós são preenchidos com uma cor que representa a classe prevista. Se False, os nós serão delineados.
"""

tree.plot_tree(arvore,
               class_names=arvore.classes_,
               feature_names=features,
               filled=True)

arvore.predict([[1, 0, 1, 1]])

"""# **Previsão de probabilidades:**

**proba** = arvore.predict_proba([[1, 1, 1, 1]]): Esta linha usa o predict_probamétodo do modelo de árvore de decisão ( arvore) para prever as probabilidades de cada classe para um novo ponto de dados representado pela lista [[1, 1, 1, 1]]. O método retorna uma matriz de probabilidades para cada classe.
Criando uma série de Pandas:

pd.Series(proba[0], index=arvore.classes_): Esta linha cria uma série Pandas usando a pd.Seriesfunção.

proba[0]: extrai a primeira linha (representando as probabilidades para o novo ponto de dados) da probamatriz obtida na etapa anterior.

index=arvore.classes_: especifica os rótulos de índice da série Pandas. Ele usa o arvore.classes_atributo, que provavelmente contém os rótulos de classe usados ​​no modelo de árvore de decisão.

Observação : **Sempre que a probabilidade for empate irá trazer por ordem alfabetica**
"""

proba = arvore.predict_proba([[1, 1, 1, 0]])
pd.Series(proba[0], index=arvore.classes_)